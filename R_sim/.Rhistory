alpha = 0.01
x_pred = data.frame(duration_minutes = c(30))
p_pred = predict(throat.glm, x_pred, se.fit = TRUE)
invlogit = plogis
pred_result = paste("The predicted result is", round(exp(1 * B1_hat), 3))
pred_CI = invlogit(p_pred$fit + c(-1,1) * qnorm(alpha/2, lower.tail = FALSE) * p_pred$se.fit)
pred_CI_result = paste(
"The confidence interval for the prediction is [", pred_CI[1], ",", pred_CI[2], "].")
print(pred_result)
print(pred_CI_result)
alpha = 0.01
x_pred = data.frame(duration_minutes = c(30))
p_pred = predict(throat.glm, x_pred, se.fit = TRUE)
invlogit = plogis
pred_result = paste("The predicted result is", round(exp(1 * B1_hat), 3))
pred_CI = invlogit(p_pred$fit + c(-1,1) * qnorm(alpha/2, lower.tail = FALSE) * p_pred$se.fit)
pred_CI_result = paste(
"The confidence interval for the prediction is [", pred_CI[1], ",", pred_CI[2], "].")
print(pred_result)
print(pred_CI_result)
pred_CI = round(invlogit(p_pred$fit + c(-1,1) * qnorm(alpha/2, lower.tail = FALSE) * p_pred$se.fit), 3)
pred_CI_result = paste(
"The confidence interval for the prediction is [", pred_CI[1], ",", pred_CI[2], "].")
print(pred_result)
print(pred_CI_result)
alpha = 0.01
x_pred = data.frame(duration_minutes = c(30))
p_pred = predict(throat.glm, x_pred, se.fit = TRUE)
invlogit = plogis
pred_result = paste("The predicted result is", round(exp(1 * B1_hat), 3))
pred_CI = round(invlogit(p_pred$fit + c(-1,1) * qnorm(alpha/2, lower.tail = FALSE) * p_pred$se.fit), 3)
pred_CI_result = paste(
"The confidence interval for the prediction is [", pred_CI[1], ",", pred_CI[2], "].")
print(pred_result)
print(pred_CI_result)
alpha = 0.01
x_pred = data.frame(duration_minutes = c(30))
p_pred = predict(throat.glm, x_pred, se.fit = TRUE)
invlogit = plogis
pred_result = paste("The predicted result is", round(exp(1 * B1_hat), 3))
pred_CI = round(
invlogit(p_pred$fit + c(-1,1) * qnorm(alpha/2, lower.tail = FALSE) * p_pred$se.fit)
, 3)
pred_CI_result = paste(
"The confidence interval for the prediction is [", pred_CI[1], ",", pred_CI[2], "].")
print(pred_result)
print(pred_CI_result)
# Interpret B1 and build a confidence interval
B1_hat = exp(coef(throat.glm)[2])
alpha = 0.05
B1_hat_SE = sqrt(diag(vcov(throat.glm))[2])
CI = B1_hat + c(-1,1) * B1_hat_SE * qnorm(alpha / 2, lower.tail = FALSE)
B1_hat_result = paste("The estimated B1 is", round(exp(1 * B1_hat), 3))
exp_CI = round(exp(1 * CI), 3)
B1_hat_CI_result = paste(
"The confidence interval for B1 hat is [", exp_CI[1], ",", exp_CI[2], "].")
print(B1_hat_result)
print(B1_hat_CI_result)
alpha = 0.01
x_pred = data.frame(duration_minutes = c(30))
p_pred = predict(throat.glm, x_pred, se.fit = TRUE)
invlogit = plogis
pred_result = paste("The predicted result is", round(exp(1 * B1_hat), 3))
pred_CI = round(
invlogit(p_pred$fit + c(-1,1) * qnorm(alpha/2, lower.tail = FALSE) * p_pred$se.fit)
, 3)
pred_CI_result = paste(
"The confidence interval for the prediction is [", pred_CI[1], ",", pred_CI[2], "].")
print(pred_result)
print(pred_CI_result)
pred_result = paste("The predicted result is", round(p_pred$fit[1]), 3))
pred_result = paste("The predicted result is", round(p_pred$fit[1], 3))
pred_CI = round(
invlogit(p_pred$fit + c(-1,1) * qnorm(alpha/2, lower.tail = FALSE) * p_pred$se.fit)
, 3)
pred_CI_result = paste(
"The confidence interval for the prediction is [", pred_CI[1], ",", pred_CI[2], "].")
print(pred_result)
print(pred_CI_result)
## (e)
```{r}
alpha = 0.01
x_pred = data.frame(duration_minutes = c(30))
p_pred = predict(throat.glm, x_pred, se.fit = TRUE)
invlogit = plogis
pred_result = paste("The predicted result is", round(p_pred$fit[1], 3))
pred_CI = round(
invlogit(p_pred$fit + c(-1,1) * qnorm(alpha/2, lower.tail = FALSE) * p_pred$se.fit)
, 3)
pred_CI_result = paste(
"The confidence interval for the prediction is [", pred_CI[1], ",", pred_CI[2], "].")
print(pred_result)
print(pred_CI_result)
p_pred
invlogit(p_pred$fit)
alpha = 0.01
x_pred = data.frame(duration_minutes = c(30))
p_pred = predict(throat.glm, x_pred, se.fit = TRUE)
invlogit = plogis
pred_result = paste("The predicted result is", round(invlogit(p_pred$fit), 3))
pred_CI = round(
invlogit(p_pred$fit + c(-1,1) * qnorm(alpha/2, lower.tail = FALSE) * p_pred$se.fit)
, 3)
pred_CI_result = paste(
"The confidence interval for the prediction is [", pred_CI[1], ",", pred_CI[2], "].")
print(pred_result)
print(pred_CI_result)
invlogit(p_pred$fit)
alpha = 0.01
x_pred = data.frame(duration_minutes = c(30))
p_pred = predict(throat.glm, x_pred, se.fit = TRUE)
invlogit = plogis
pred_result = paste("The predicted result is", round(invlogit(p_pred$fit), 3))
pred_CI = round(
invlogit(p_pred$fit + c(-1,1) * qnorm(alpha/2, lower.tail = FALSE) * p_pred$se.fit)
, 3)
pred_CI_result = paste(
"The confidence interval for the prediction is [", pred_CI[1], ",", pred_CI[2], "].")
print(pred_result)
print(pred_CI_result)
library(tidyverse)
library(janitor)
library(dobson)
library(dplyr)
library(ggplot2)
df <- hiroshima |>
mutate(dose_rads = case_when(
radiation == "0" ~ 0,
radiation == "1 to 9" ~ 5,
radiation == "10 to 49" ~ 29.5,
radiation == "50 to 99" ~ 74.5,
radiation == "100 to 199" ~ 149.5,
radiation == "200 +" ~ 249.5
)) |> clean_names()
df_prop = df %>% group_by(dose_rads) %>% summarize(dose_rads = dose_rads, prop_leukemia = (leukemia / total_cancers))
plt = ggplot(df_prop, aes(x=dose_rads, y = prop_leukemia)) + labs(x = 'radiation dose', y = 'proportion of leukemia')
plt + geom_jitter(height = 0.1, size = 3, alpha = 1/2) + stat_smooth(method = glm)
binom_df <- df |>
rowwise() |>
reframe(dose_rads = dose_rads,
leukemia = rep(1:0, c(leukemia, total_cancers - leukemia)))
# Fitting a logistic regression model and summarize it
leukemia.glm = glm(leukemia ~ dose_rads, family = 'binomial', data = binom_df)
summary(leukemia.glm)
# Interpret B1 and build a confidence interval
B1_hat = exp(coef(leukemia.glm)[2])
alpha = 0.05
B1_hat_SE = sqrt(diag(vcov(leukemia.glm))[2])
CI = B1_hat + c(-1,1) * B1_hat_SE * qnorm(alpha / 2, lower.tail = FALSE)
B1_hat_result = paste("The estimated B1 is", round(exp(1 * B1_hat), 3))
exp_CI = round(exp(1 * CI), 3)
B1_hat_CI_result = paste(
"The confidence interval for B1 hat is [", exp_CI[1], ",", exp_CI[2], "].")
print(B1_hat_result)
print(B1_hat_CI_result)
throat = read_csv("C:/Users/user/OneDrive/바탕 화면/2025_SP/STAT 3302/Submisssion/Homework_2/throat.csv")
throat = throat %>% mutate(duration_minutes = round(duration_minutes, -1))
throat_prop = throat %>%
group_by(duration_minutes) %>%
summarize(num_cases = n(),
num_throat = sum(sore_throat),
prop_throat = num_throat /num_cases)
plot = ggplot(throat_prop,
aes(x = duration_minutes, y = prop_throat)) +
geom_jitter(height = 1/20,
width = 1/400,
size = 3,
alpha = 1/2)
plot
logit = qlogis
plot_logit = ggplot(throat_prop, aes(x = duration_minutes, y = logit(prop_throat))) +
geom_point(size = 3) + labs(y = "logit(proportion of sore throat")
plot_logit
# Fitting a logistic regression model and summarize it
throat.glm = glm(sore_throat ~ duration_minutes, family = 'binomial', data = throat)
summary(throat.glm)
# Interpret B1 and build a confidence interval
B1_hat = exp(coef(throat.glm)[2])
alpha = 0.05
B1_hat_SE = sqrt(diag(vcov(throat.glm))[2])
CI = B1_hat + c(-1,1) * B1_hat_SE * qnorm(alpha / 2, lower.tail = FALSE)
B1_hat_result = paste("The estimated B1 is", round(exp(1 * B1_hat), 3))
exp_CI = round(exp(1 * CI), 3)
B1_hat_CI_result = paste(
"The confidence interval for B1 hat is [", exp_CI[1], ",", exp_CI[2], "].")
print(B1_hat_result)
print(B1_hat_CI_result)
alpha = 0.01
x_pred = data.frame(duration_minutes = c(30))
p_pred = predict(throat.glm, x_pred, se.fit = TRUE)
invlogit = plogis
pred_result = paste("The predicted result is", round(invlogit(p_pred$fit), 3))
pred_CI = round(
invlogit(p_pred$fit + c(-1,1) * qnorm(alpha/2, lower.tail = FALSE) * p_pred$se.fit)
, 3)
pred_CI_result = paste(
"The confidence interval for the prediction is [", pred_CI[1], ",", pred_CI[2], "].")
print(pred_result)
print(pred_CI_result)
df_prop = df %>% group_by(dose_rads) %>% summarize(dose_rads = dose_rads, prop_leukemia = (leukemia / total_cancers))
plt = ggplot(df_prop, aes(x=dose_rads, y = prop_leukemia)) + labs(x = 'radiation dose', y = 'proportion of leukemia')
plt + geom_jitter(height = 0.1, size = 3, alpha = 1/2) + stat_smooth(method = glm)
## (a)
```{r fig.width= 5.5, fig.height=3, fig.align= 'center', message=FALSE}
df_prop = df %>% group_by(dose_rads) %>% summarize(dose_rads = dose_rads, prop_leukemia = (leukemia / total_cancers))
plt = ggplot(df_prop, aes(x=dose_rads, y = prop_leukemia)) + labs(x = 'radiation dose', y = 'proportion of leukemia')
plt + geom_jitter(height = 0.1, size = 3, alpha = 1/2) + stat_smooth(method = glm)
plt + geom_point(size = 3)
df_prop = df %>% group_by(dose_rads) %>% summarize(dose_rads = dose_rads, prop_leukemia = (leukemia / total_cancers))
plt = ggplot(df_prop, aes(x=dose_rads, y = prop_leukemia)) + labs(x = 'radiation dose', y = 'proportion of leukemia')
plt + geom_point(size = 3)
throat_prop = throat %>%
group_by(duration_minutes) %>%
summarize(num_cases = n(),
num_throat = sum(sore_throat),
prop_throat = num_throat / num_cases)
plot = ggplot(throat_prop,
aes(x = duration_minutes, y = prop_throat)) +
geom_jitter(height = 1/20,
width = 1/400,
size = 3)
plot
plot = ggplot(throat_prop,
aes(x = duration_minutes, y = prop_throat)) + geom_point(size = 3)
throat_prop = throat %>%
group_by(duration_minutes) %>%
summarize(num_cases = n(),
num_throat = sum(sore_throat),
prop_throat = num_throat / num_cases)
plot = ggplot(throat_prop,
aes(x = duration_minutes, y = prop_throat)) +
geom_point(size = 3)
plot
plot = ggplot(throat_prop,
aes(x = duration_minutes, y = prop_throat)) +
geom_jitter(height = 1/20,
width = 1/400,
size = 3)
plot
throat_prop = throat %>%
group_by(duration_minutes) %>%
summarize(num_cases = n(),
num_throat = sum(sore_throat),
prop_throat = num_throat / num_cases)
plot = ggplot(throat_prop,
aes(x = duration_minutes, y = prop_throat)) +
geom_jitter(height = 1/20,
width = 1/400,
size = 3)
plot
throat_prop = throat %>%
group_by(duration_minutes) %>%
summarize(num_cases = n(),
num_throat = sum(sore_throat),
prop_throat = num_throat / num_cases)
plot = ggplot(throat_prop,
aes(x = duration_minutes, y = prop_throat)) +
geom_jitter(height = 1/20,
width = 1/400,
size = 3)
plot
throat_prop = throat %>%
group_by(duration_minutes) %>%
summarize(num_cases = n(),
num_throat = sum(sore_throat),
prop_throat = num_throat / num_cases)
plot = ggplot(throat_prop,
aes(x = duration_minutes, y = prop_throat)) +
geom_jitter(height = 1/20,
width = 1/400,
size = 3,
alpha = 1/2)
plot
throat = read_csv("C:/Users/user/OneDrive/바탕 화면/2025_SP/STAT 3302/Submisssion/Homework_2/throat.csv")
throat = throat %>% mutate(duration_minutes = round(duration_minutes, -1))
throat_prop = throat %>%
group_by(duration_minutes) %>%
summarize(num_cases = n(),
num_throat = sum(sore_throat),
prop_throat = num_throat / num_cases)
plot = ggplot(throat_prop,
aes(x = duration_minutes, y = prop_throat)) +
geom_jitter(height = 1/20,
width = 1/400,
size = 3,
alpha = 1/2)
plot
throat_prop = throat %>%
group_by(duration_minutes) %>%
summarize(num_cases = n(),
num_throat = sum(sore_throat),
prop_throat = num_throat / num_cases)
plot = ggplot(throat_prop,
aes(x = duration_minutes, y = prop_throat)) +
geom_jitter(height = 1/20,
width = 1/400,
size = 3,
alpha = 1/2)
plot
plot = ggplot(throat_prop,
aes(x = duration_minutes, y = prop_throat)) +
geom_jitter(height = 1/20,
width = 1/400,
size = 3)
plot
logit = qlogis
plot_logit = ggplot(throat_prop,
aes(x = duration_minutes, y = logit(prop_throat))) +
geom_jitter(height = 1/20,
width = 1/400,
size = 3) +
labs(y = "logit(proportion of sore throat")
plot_logit
plot_logit = ggplot(throat_prop,
aes(x = duration_minutes, y = logit(prop_throat))) +
geom_jitter(height = 1/20,
width = 1,
size = 3) +
labs(y = "logit(proportion of sore throat")
plot_logit
throat_prop = throat %>%
group_by(duration_minutes) %>%
summarize(num_cases = n(),
num_throat = sum(sore_throat),
prop_throat = num_throat / num_cases)
plot = ggplot(throat_prop,
aes(x = duration_minutes, y = prop_throat)) +
labs(x = 'duration in minutes', y = 'probability of having a sore throat') +
geom_jitter(height = 1/20,
width = 1/400,
size = 3)
plot
throat_prop = throat %>%
group_by(duration_minutes) %>%
summarize(num_cases = n(),
num_throat = sum(sore_throat),
prop_throat = num_throat / num_cases)
plot = ggplot(throat_prop,
aes(x = duration_minutes, y = prop_throat)) +
labs(x = 'duration in minutes', y = 'probability of sore throat') +
geom_jitter(height = 1/20,
width = 1/400,
size = 3)
plot
logit = qlogis
plot_logit = ggplot(throat_prop,
aes(x = duration_minutes, y = logit(prop_throat))) +
labs(x = 'duration in minutes', y = 'logit of the probability') +
geom_jitter(height = 1/20,
width = 1/400,
size = 3)
plot_logit
logit = qlogis
plot_logit = ggplot(throat_prop,
aes(x = duration_minutes, y = logit(prop_throat))) +
labs(x = 'duration in minutes', y = 'logit of the probability') +
geom_jitter(height = 1/20,
width = 1/400,
size = 2)
plot_logit
library(alr4)
library(tidyverse)
library(readr)
library(dplyr)
library(dbplyr)
library(DBI)
library(RSQLite)
view_history = read_csv("C:/Users/user/OneDrive/바탕 화면/프로젝트/YouTube-View-History/datasets/YouTube_View_History_Modified.csv", locale = locale(encoding = "EUC-KR"))
conn = src_memdb()
conn_isolated = conn$con
copy_to(conn, view_history, overwrite = TRUE)
# 가장 많은 영상을 본 채널 목록.csv
df = tbl(conn, sql("SELECT channel_name
, COUNT(DISTINCT video_link) AS cnts
, channel_link
FROM view_history
GROUP BY channel_link
ORDER BY cnts DESC"))
df
sum(is.na(view_history$viewing_time))
write.csv(df, "C:/Users/user/OneDrive/바탕 화면/프로젝트/YouTube-View-History/datasets/YouTube_Channels.csv")
for (i in 1:length(view_history$video_link)) {
if (is.na(view_history$viewing_time[i])) {
print(view_history$video_link[i])
print(view_history$video_title[i])
print(view_history$channel_link[i])
print(view_history$channel_name[i])
print(view_history$viewing_time[i])
print("====================================")
}
}
SELECT *
FROM view_history
view_history = read_csv("C:/Users/user/OneDrive/바탕 화면/프로젝트/YouTube-View-History/datasets/YouTube_View_History_Modified.csv", locale = locale(encoding = "EUC-KR"))
conn = src_memdb()
conn_isolated = conn$con
copy_to(conn, view_history, overwrite = TRUE)
# 가장 많은 영상을 본 채널 목록.csv
df = tbl(conn, sql("SELECT channel_name
, COUNT(DISTINCT video_link) AS cnts
, channel_link
FROM view_history
GROUP BY channel_link
ORDER BY cnts DESC"))
df
sum(is.na(view_history$viewing_time))
write.csv(df, "C:/Users/user/OneDrive/바탕 화면/프로젝트/YouTube-View-History/datasets/YouTube_Channels.csv")
summary(view_history)
view_history = read_csv("C:/Users/user/OneDrive/바탕 화면/프로젝트/YouTube-View-History/datasets/YouTube_View_History_Modified.csv", locale = locale(encoding = "EUC-KR"))
view_history$viewing_time = as.POSIXct(view_history$viewing_time, format = "%Y-%m-%d %H:%M:%S")
conn = src_memdb()
conn_isolated = conn$con
copy_to(conn, view_history, overwrite = TRUE)
# 가장 많은 영상을 본 채널 목록.csv
df = tbl(conn, sql("SELECT channel_name
, COUNT(DISTINCT video_link) AS cnts
, channel_link
FROM view_history
GROUP BY channel_link
ORDER BY cnts DESC"))
df
# check if null value exists
sum(is.na(view_history$viewing_time))
write.csv(df, "C:/Users/user/OneDrive/바탕 화면/프로젝트/YouTube-View-History/datasets/YouTube_Channels.csv")
conn = src_memdb()
conn_isolated = conn$con
copy_to(conn, view_history, overwrite = TRUE)
# 가장 많은 영상을 본 채널 목록.csv
df = tbl(conn, sql("SELECT channel_name
, COUNT(DISTINCT video_link) AS cnts
, channel_link
FROM view_history
GROUP BY channel_link
ORDER BY cnts DESC"))
# check if null value exists
sum(is.na(view_history$viewing_time))
write.csv(df, "C:/Users/user/OneDrive/바탕 화면/프로젝트/YouTube-View-History/datasets/YouTube_Channels.csv")
conn = src_memdb()
conn_isolated = conn$con
copy_to(conn, view_history, overwrite = TRUE)
# 가장 많은 영상을 본 채널 목록.csv
df = tbl(conn, sql("SELECT channel_name
, COUNT(DISTINCT video_link) AS cnts
, channel_link
FROM view_history
GROUP BY channel_link
ORDER BY cnts DESC"))
# check if null value exists
sum(is.na(view_history$viewing_time))
write.csv(df, "C:/Users/user/OneDrive/바탕 화면/프로젝트/YouTube-View-History/datasets/YouTube_Channels.csv")
view_history
view_history = read.csv("C:/Users/user/OneDrive/바탕 화면/프로젝트/YouTube-View-History/datasets/YouTube_View_History_Modified.csv", locale = locale(encoding = "EUC-KR"))
view_history = read.csv("C:/Users/user/OneDrive/바탕 화면/프로젝트/YouTube-View-History/datasets/YouTube_View_History_Modified.csv", locale = locale(encoding = "EUC-KR"))
view_history = read_csv("C:/Users/user/OneDrive/바탕 화면/프로젝트/YouTube-View-History/datasets/YouTube_View_History_Modified.csv", locale = locale(encoding = "EUC-KR"))
view_history$viewing_time = as.POSIXct(view_history$viewing_time, format = "%Y-%m-%d %H:%M:%S")
view_history
view_history = read_csv("C:/Users/user/OneDrive/바탕 화면/프로젝트/YouTube-View-History/datasets/YouTube_View_History_Modified.csv", locale = locale(encoding = "EUC-KR"), col_types = cols(your_time_column = col_datetime("%Y-%m-%d %H:%M:%S")))
view_history
summary(view_history)
summary(view_history)
summary(view_history)
view_history = read_csv("C:/Users/user/OneDrive/바탕 화면/프로젝트/YouTube-View-History/datasets/YouTube_View_History_Modified.csv", locale = locale(encoding = "EUC-KR"), col_types = cols(your_time_column = col_datetime("%Y-%m-%d %H:%M:%S")))
view_history
conn = src_memdb()
conn_isolated = conn$con
copy_to(conn, view_history, overwrite = TRUE)
# 가장 많은 영상을 본 채널 목록.csv
df = tbl(conn, sql("SELECT channel_name
, COUNT(DISTINCT video_link) AS cnts
, channel_link
FROM view_history
GROUP BY channel_link
ORDER BY cnts DESC"))
# check if null value exists
sum(is.na(view_history$viewing_time))
write.csv(df, "C:/Users/user/OneDrive/바탕 화면/프로젝트/YouTube-View-History/datasets/YouTube_Channels.csv")
view_history = read_csv("C:/Users/user/OneDrive/바탕 화면/프로젝트/YouTube-View-History/datasets/YouTube_View_History_Modified.csv", locale = locale(encoding = "EUC-KR"))
view_history
library(alr4)
library(tidyverse)
library(readr)
library(dplyr)
library(dbplyr)
library(DBI)
library(RSQLite)
view_history = read_csv("C:/Users/user/OneDrive/바탕 화면/프로젝트/YouTube-View-History/datasets/YouTube_View_History_Modified.csv", locale = locale(encoding = "EUC-KR"), col_types = cols(your_time_column = col_datetime("%Y-%m-%d %H:%M:%S")))
view_history
conn = src_memdb()
conn_isolated = conn$con
copy_to(conn, view_history, overwrite = TRUE)
# 가장 많은 영상을 본 채널 목록.csv
df = tbl(conn, sql("SELECT channel_name
, COUNT(DISTINCT video_link) AS cnts
, channel_link
FROM view_history
GROUP BY channel_link
ORDER BY cnts DESC"))
# check if null value exists
sum(is.na(view_history$viewing_time))
write.csv(df, "C:/Users/user/OneDrive/바탕 화면/프로젝트/YouTube-View-History/datasets/YouTube_Channels.csv")
# print if it is NULL value
for (i in 1:length(view_history$video_link)) {
if (is.na(view_history$viewing_time[i])) {
print(view_history$video_link[i])
print(view_history$video_title[i])
print(view_history$channel_link[i])
print(view_history$channel_name[i])
print(view_history$viewing_time[i])
print("====================================")
}
}
summary(view_history)
